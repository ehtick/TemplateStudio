name: $(Date:yyyyMMdd)$(Rev:.r)

trigger:
  branches:
    include:
    - dev
    - release
  paths:
    exclude:
    - docs/*
    - README.md
  batch: True

schedules:
- cron: 0 5 * * 1,2,3,4,5
  branches:
    include:
    - dev
    
resources:
  repositories:
  - repository: self
    type: git
    ref: refs/heads/dev
    
jobs:
- job:
  displayName: Build and Basic Tests
  timeoutInMinutes: 1000

  strategy:
    matrix:
      Analyze:
        BuildConfiguration: Analyze
        BuildPlatform: Any CPU

  pool:
    vmImage: windows-2022

  steps:
  - checkout: self
    clean: true
    submodules: recursive

  - task: NuGetToolInstaller@1
    displayName: 'Use NuGet'
    inputs:
      checkLatest: true

  - task: NuGetCommand@2
    displayName: 'nuget restore'
    inputs:
      solution: code/Big.sln
      selectOrConfig: config
      nugetConfigPath: code/CoreTemplateStudio/code/Nuget.Config

  - task: VSBuild@1
    displayName: 'Build code/Big.sln'
    inputs:
      solution: code/Big.sln
      vsVersion: 16.0
      platform: $(BuildPlatform)
      configuration: $(BuildConfiguration)

  - task: BatchScript@1
    displayName: 'Set Agent Drive and Clean Test Folder'
    inputs:
      filename: _build/SetAgentDriveAndCleanTestFolder.bat
      modifyEnvironment: true

  - task: UseDotNet@2
    displayName: 'Use .NET Core 3.1.x'
    inputs:
      version: '3.1.x'

  - task: DotNetCoreCLI@2
    displayName: Run Core Tests
    inputs:
      command: test
      projects: '**\code\CoreTemplateStudio\code\test\CoreTemplateStudio.Core.Test'
      arguments: --logger:trx --configuration Debug
      testRunTitle: Core Tests

  - task: DotNetCoreCLI@2
    displayName: Run VSTemplate Tests
    inputs:
      command: test
      projects: '**\code\test\VsTemplates.Test'
      arguments: --logger:trx --configuration Debug
      testRunTitle: VSTemplate Tests

  - task: CmdLine@1
    displayName: Run UI Tests
    inputs:
      filename: $(UserProfile)\.nuget\packages\xunit.runner.console\2.4.1\tools\net47\xunit.console.exe
      arguments: Code\test\UI.Test\bin\$(BuildConfiguration)\Microsoft.UI.Test.dll -notrait "ExecutionSet=ManualOnly" -xml $(Build.SourcesDirectory)\TEST-UI-Result.xml -parallel none

  - task: CmdLine@1
    displayName: Run LocalizationTool Verify
    inputs:
      filename: $(Build.SourcesDirectory)\code\tools\Localization\bin\$(BuildConfiguration)\Localization.exe
      arguments: verify -s $(Build.SourcesDirectory)
      failOnStandardError: true

- job:
  displayName: 'Template Tests WinUI'
  timeoutInMinutes: 1000

  strategy:
    matrix:
      Analyze:
        BuildConfiguration: Analyze
        BuildPlatform: Any CPU

  pool:
    vmImage: windows-2022

  steps:
  - checkout: self
    clean: true
    submodules: recursive

  - task: NuGetToolInstaller@1
    displayName: 'Use NuGet'
    inputs:
      checkLatest: true

  - task: NuGetCommand@2
    displayName: nuget restore
    inputs:
      solution: code/Test.sln
      selectOrConfig: config
      nugetConfigPath: code/CoreTemplateStudio/code/Nuget.Config

  - task: VSBuild@1
    displayName: Build code/Test.sln
    inputs:
      solution: code/Test.sln
      vsVersion: 16.0
      platform: $(BuildPlatform)
      configuration: $(BuildConfiguration)

  - task: BatchScript@1
    displayName: 'Set Agent Drive and Clean Test Folder'
    inputs:
      filename: _build/SetAgentDriveAndCleanTestFolder.bat
      modifyEnvironment: true

  - task: UseDotNet@2
    displayName: Use .NET 5.x
    inputs:
      version: '5.x'

  - task: PowerShell@1
    displayName: Run Template Tests (Minimum WinUI)
    inputs:
      scriptName: _build/ParallelTestExecution.ps1
      arguments: -testRunner $(UserProfile)\.nuget\packages\xunit.runner.console\2.4.1\tools\net47\xunit.console.exe -testLibrary $(Build.SourcesDirectory)\Code\test\Templates.Test\bin\$(BuildConfiguration)\Microsoft.Templates.Test.dll -traits ExecutionSet='MinimumMVVMToolkitWinUI', ExecutionSet='MinimumNoneWinUI' -outputDir $(Build.SourcesDirectory)

  - task: PowerShell@1
    displayName: Run Template Tests (Build WinUI)
    inputs:
      scriptName: _build/ParallelTestExecution.ps1
      arguments: -testRunner $(UserProfile)\.nuget\packages\xunit.runner.console\2.4.1\tools\net47\xunit.console.exe -testLibrary $(Build.SourcesDirectory)\Code\test\Templates.Test\bin\$(BuildConfiguration)\Microsoft.Templates.Test.dll -traits 'ExecutionSet=BuildMVVMToolkitWinUI' , 'ExecutionSet=BuildNoneWinUI' -outputDir $(Build.SourcesDirectory)

  - task: PublishTestResults@2
    displayName: 'Publish Test Results **\TEST-*.xml'
    continueOnError: True
    inputs:
      testRunner: XUnit
      testResultsFiles: '**\TEST-*.xml'

- job:
  displayName: Template Tests WPF
  timeoutInMinutes: 1000
  cancelTimeoutInMinutes: 1

  strategy:
    matrix:
      Analyze:
        BuildConfiguration: Analyze
        BuildPlatform: Any CPU

  pool:
    vmImage: windows-2022

  steps:
  - checkout: self
    clean: true
    submodules: recursive

  - task: NuGetToolInstaller@1
    displayName: 'Use NuGet'
    inputs:
      checkLatest: true

  - task: NuGetCommand@2
    displayName: nuget restore
    inputs:
      solution: code/Test.sln
      selectOrConfig: config
      nugetConfigPath: code/CoreTemplateStudio/code/Nuget.Config

  - task: VSBuild@1
    displayName: Build code/Test.sln
    inputs:
      solution: code/Test.sln
      vsVersion: 16.0
      platform: $(BuildPlatform)
      configuration: $(BuildConfiguration)

  - task: BatchScript@1
    displayName: Set Agent Drive and Clean Test Folder
    inputs:
      filename: _build/SetAgentDriveAndCleanTestFolder.bat
      modifyEnvironment: true

  - task: UseDotNet@2
    displayName: 'Use .NET 6.x'
    inputs:
      version: '6.x'

  - task: PowerShell@1
    displayName: 'Run Template Tests (Minimum WPF)'
    inputs:
      scriptName: _build/ParallelTestExecution.ps1
      arguments: -testRunner $(UserProfile)\.nuget\packages\xunit.runner.console\2.4.1\tools\net47\xunit.console.exe -testLibrary $(Build.SourcesDirectory)\Code\test\Templates.Test\bin\$(BuildConfiguration)\Microsoft.Templates.Test.dll -traits ExecutionSet='MinimumCodeBehindWpf', 'ExecutionSet=MinimumPrismWPF', 'ExecutionSet=MinimumMVVMLightWPF', 'ExecutionSet=MinimumMVVMBasicWPF','ExecutionSet=MinimumMVVMToolkitWPF'  -outputDir $(Build.SourcesDirectory)

  - task: PowerShell@1
    displayName: Run Template Tests (Build WPF)
    enabled: False
    inputs:
      scriptName: _build/ParallelTestExecution.ps1
      arguments: -testRunner $(UserProfile)\.nuget\packages\xunit.runner.console\2.4.1\tools\net47\xunit.console.exe -testLibrary $(Build.SourcesDirectory)\Code\test\Templates.Test\bin\$(BuildConfiguration)\Microsoft.Templates.Test.dll -traits 'ExecutionSet=BuildCodeBehindWpf', 'ExecutionSet=BuildMVVMBasicWpf', 'ExecutionSet=BuildMVVMToolkitWpf', 'ExecutionSet=BuildPrismWpf', 'ExecutionSet=BuildMVVMLightWpf' -outputDir $(Build.SourcesDirectory)

  - task: PublishTestResults@2
    name: PublishTestResults7
    displayName: Publish Test Results **\TEST-*.xml
    continueOnError: True
    inputs:
      testRunner: XUnit
      testResultsFiles: '**\TEST-*.xml'

- job:
  displayName: 'Template Tests UWP'
  timeoutInMinutes: 1000

  strategy:
    matrix:
      Analyze:
        BuildConfiguration: Analyze
        BuildPlatform: Any CPU

  pool:
    vmImage: windows-2022

  steps:
  - checkout: self
    clean: true
    submodules: recursive

  - task: NuGetToolInstaller@1
    displayName: 'Use NuGet'
    inputs:
      checkLatest: true

  - task: NuGetCommand@2
    displayName: nuget restore
    inputs:
      solution: code/Test.sln
      selectOrConfig: config
      nugetConfigPath: code/CoreTemplateStudio/code/Nuget.Config

  - task: VSBuild@1
    displayName: Build code/Test.sln
    inputs:
      solution: code/Test.sln
      vsVersion: 16.0
      platform: $(BuildPlatform)
      configuration: $(BuildConfiguration)

  - task: BatchScript@1
    displayName: Set Agent Drive and Clean Test Folder
    inputs:
      filename: _build/SetAgentDriveAndCleanTestFolder.bat
      modifyEnvironment: true

  - task: PowerShell@1
    displayName: Run Template Tests (Minimum UWP)
    inputs:
      scriptName: _build/ParallelTestExecution.ps1
      arguments: -testRunner $(UserProfile)\.nuget\packages\xunit.runner.console\2.4.1\tools\net47\xunit.console.exe -testLibrary $(Build.SourcesDirectory)\Code\test\Templates.Test\bin\$(BuildConfiguration)\Microsoft.Templates.Test.dll -traits 'ExecutionSet=MinimumCodebehind', 'ExecutionSet=MinimumMVVMLight', 'ExecutionSet=MinimumMVVMBasic',  'ExecutionSet=MinimumMVVMToolkit', 'ExecutionSet=MinimumCaliburnMicro', 'ExecutionSet=MinimumPrism'  -outputDir $(Build.SourcesDirectory)

  - task: PowerShell@1
    displayName: Run Template Tests (BuildVBStyle, TemplateValidation, RightClick)
    inputs:
      scriptName: _build/ParallelTestExecution.ps1
      arguments: -testRunner $(UserProfile)\.nuget\packages\xunit.runner.console\2.4.1\tools\net47\xunit.console.exe -testLibrary $(Build.SourcesDirectory)\Code\test\Templates.Test\bin\$(BuildConfiguration)\Microsoft.Templates.Test.dll -traits 'ExecutionSet=BuildVBStyle', 'ExecutionSet=TemplateValidation', 'ExecutionSet=BuildRightClickWithLegacy'  -outputDir $(Build.SourcesDirectory)

  - task: PowerShell@1
    displayName: Run Template Tests (Build UWP)
    inputs:
      scriptName: _build/ParallelTestExecution.ps1
      arguments: -testRunner $(UserProfile)\.nuget\packages\xunit.runner.console\2.4.1\tools\net47\xunit.console.exe -testLibrary $(Build.SourcesDirectory)\Code\test\Templates.Test\bin\$(BuildConfiguration)\Microsoft.Templates.Test.dll -traits 'ExecutionSet=BuildMVVMBasic', 'ExecutionSet=BuildMVVMToolkit', 'ExecutionSet=BuildCodeBehind', 'ExecutionSet=BuildMVVMLight',  'ExecutionSet=BuildCaliburnMicro', 'ExecutionSet=BuildPrism' -outputDir $(Build.SourcesDirectory)

  - task: PublishTestResults@2
    displayName: Publish Test Results **\TEST-*.xml
    continueOnError: True
    inputs:
      testRunner: XUnit
      testResultsFiles: '**\TEST-*.xml'